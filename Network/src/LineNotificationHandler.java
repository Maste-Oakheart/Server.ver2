package Network.src;

import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

public class LineNotificationHandler {
    private static final String LINE_API_URL = "https://notify-api.line.me/api/notify";
    private static final String TOKEN = "lBtd1vht4tg0Qdt0Rz1HRBp2jxsyPOWgUHv9OQvivIT";
    private static final int MAX_CLIENTS = 10;
    private final Set<String> knownClients = new HashSet<>(); // ‡πÄ‡∏Å‡πá‡∏ö clientId ‡πÅ‡∏ó‡∏ô IP
    private final AtomicInteger failedLoginAttempts = new AtomicInteger(0);
    private static final int INTRUSION_THRESHOLD = 5;
    private static final long RESET_INTERVAL = 300000;
    private long lastResetTime = System.currentTimeMillis();

    public boolean canAcceptNewClient(String clientId, int currentClientCount) {
        if (currentClientCount >= MAX_CLIENTS) {
            sendLineNotification("‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ\n" +
                               "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: " + clientId + "\n" +
                               "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " + currentClientCount + "\n" +
                               "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î: " + MAX_CLIENTS);
            return false;
        }
        return true;
    }

    public void registerNewClient(String clientId, String clientIP, int currentClientCount) {
        if (!knownClients.contains(clientId)) {
            knownClients.add(clientId);
            sendLineNotification("‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö\n" +
                               "Client ID: " + clientId + "\n" +
                               "IP Address: " + clientIP + "\n" +
                               "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " + currentClientCount);
        }
    }

    public void checkPotentialIntrusion(String clientIP) {
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastResetTime > RESET_INTERVAL) {
            failedLoginAttempts.set(0);
            lastResetTime = currentTime;
        }

        if (failedLoginAttempts.incrementAndGet() >= INTRUSION_THRESHOLD) {
            sendLineNotification("üö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å!\n" +
                               "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥\n" +
                               "IP Address: " + clientIP + "\n" +
                               "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°: " + failedLoginAttempts.get());
            failedLoginAttempts.set(0);
        }
    }

    private void sendLineNotification(String message) {
        try {
            URL url = URI.create(LINE_API_URL).toURL();
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Authorization", "Bearer " + TOKEN);
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

            String postData = "message=" + java.net.URLEncoder.encode(message, StandardCharsets.UTF_8);
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = postData.getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
            }

            int responseCode = conn.getResponseCode();
            if (responseCode != HttpURLConnection.HTTP_OK) {
                System.err.println("Line Notification failed. Response Code: " + responseCode);
            }
        } catch (IOException e) {
            System.err.println("Error sending Line notification: " + e.getMessage());
        }
    }

    public void notifyServerDown(String reason) {
        sendLineNotification("üî¥ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: Server ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n" +
                           "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: " + reason + "\n" +
                           "‡πÄ‡∏ß‡∏•‡∏≤: " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss")));
    }

}